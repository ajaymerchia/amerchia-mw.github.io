var mwwebchat = function (t) { var e = {}; function a(s) { if (e[s]) return e[s].exports; var i = e[s] = { i: s, l: !1, exports: {} }; return t[s].call(i.exports, i, i.exports, a), i.l = !0, i.exports } return a.m = t, a.c = e, a.d = function (t, e, s) { a.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s }) }, a.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, a.t = function (t, e) { if (1 & e && (t = a(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var s = Object.create(null); if (a.r(s), Object.defineProperty(s, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var i in t) a.d(s, i, function (e) { return t[e] }.bind(null, i)); return s }, a.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return a.d(e, "a", e), e }, a.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, a.p = "", a(a.s = 227) }({ 227: function (t, e, a) { "use strict"; a.r(e), a.d(e, "openMWWebChat", (function () { return k })); const s = Symbol("Comlink.proxy"), i = Symbol("Comlink.endpoint"), n = Symbol("Comlink.releaseProxy"), r = Symbol("Comlink.thrown"), o = t => "object" == typeof t && null !== t || "function" == typeof t, h = new Map([["proxy", { canHandle: t => o(t) && t[s], serialize(t) { const { port1: e, port2: a } = new MessageChannel; return l(t, e), [a, [a]] }, deserialize: t => (t.start(), d(t)) }], ["throw", { canHandle: t => o(t) && r in t, serialize({ value: t }) { let e; return e = t instanceof Error ? { isError: !0, value: { message: t.message, name: t.name, stack: t.stack } } : { isError: !1, value: t }, [e, []] }, deserialize(t) { if (t.isError) throw Object.assign(new Error(t.value.message), t.value); throw t.value } }]]); function l(t, e = self) { e.addEventListener("message", (function a(i) { if (!i || !i.data) return; const { id: n, type: o, path: h } = Object.assign({ path: [] }, i.data), d = (i.data.argumentList || []).map(b); let u; try { const e = h.slice(0, -1).reduce((t, e) => t[e], t), a = h.reduce((t, e) => t[e], t); switch (o) { case "GET": u = a; break; case "SET": e[h.slice(-1)[0]] = b(i.data.value), u = !0; break; case "APPLY": u = a.apply(e, d); break; case "CONSTRUCT": u = function (t) { return Object.assign(t, { [s]: !0 }) }(new a(...d)); break; case "ENDPOINT": { const { port1: e, port2: a } = new MessageChannel; l(t, a), u = function (t, e) { return f.set(t, e), t }(e, [e]) } break; case "RELEASE": u = void 0; break; default: return } } catch (t) { u = { value: t, [r]: 0 } } Promise.resolve(u).catch(t => ({ value: t, [r]: 0 })).then(t => { const [s, i] = y(t); e.postMessage(Object.assign(Object.assign({}, s), { id: n }), i), "RELEASE" === o && (e.removeEventListener("message", a), c(e)) }) })), e.start && e.start() } function c(t) { (function (t) { return "MessagePort" === t.constructor.name })(t) && t.close() } function d(t, e) { return function t(e, a = [], s = function () { }) { let r = !1; const o = new Proxy(s, { get(s, i) { if (u(r), i === n) return () => g(e, { type: "RELEASE", path: a.map(t => t.toString()) }).then(() => { c(e), r = !0 }); if ("then" === i) { if (0 === a.length) return { then: () => o }; const t = g(e, { type: "GET", path: a.map(t => t.toString()) }).then(b); return t.then.bind(t) } return t(e, [...a, i]) }, set(t, s, i) { u(r); const [n, o] = y(i); return g(e, { type: "SET", path: [...a, s].map(t => t.toString()), value: n }, o).then(b) }, apply(s, n, o) { u(r); const h = a[a.length - 1]; if (h === i) return g(e, { type: "ENDPOINT" }).then(b); if ("bind" === h) return t(e, a.slice(0, -1)); const [l, c] = m(o); return g(e, { type: "APPLY", path: a.map(t => t.toString()), argumentList: l }, c).then(b) }, construct(t, s) { u(r); const [i, n] = m(s); return g(e, { type: "CONSTRUCT", path: a.map(t => t.toString()), argumentList: i }, n).then(b) } }); return o }(t, [], e) } function u(t) { if (t) throw new Error("Proxy has been released and is not useable") } function m(t) { const e = t.map(y); return [e.map(t => t[0]), (a = e.map(t => t[1]), Array.prototype.concat.apply([], a))]; var a } const f = new WeakMap; function p(t, e = self, a = "*") { return { postMessage: (e, s) => t.postMessage(e, a, s), addEventListener: e.addEventListener.bind(e), removeEventListener: e.removeEventListener.bind(e) } } function y(t) { for (const [e, a] of h) if (a.canHandle(t)) { const [s, i] = a.serialize(t); return [{ type: "HANDLER", name: e, value: s }, i] } return [{ type: "RAW", value: t }, f.get(t) || []] } function b(t) { switch (t.type) { case "HANDLER": return h.get(t.name).deserialize(t.value); case "RAW": return t.value } } function g(t, e, a) { return new Promise(s => { const i = new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-"); t.addEventListener("message", (function e(a) { a.data && a.data.id && a.data.id === i && (t.removeEventListener("message", e), s(a.data)) })), t.start && t.start(), t.postMessage(Object.assign({ id: i }, e), a) }) } function v(t, e, a) { p(t.contentWindow).postMessage({ action: e, payload: a }) } var I = class { constructor(t) { this.modalBackground = document.createElement("div"), this.modalIframe = document.createElement("iframe"), Object.assign(this.modalBackground.style, { display: "none", position: "fixed", zIndex: "9999", justifyContent: "center", alignItems: "center", left: 0, top: 0, width: "100%", height: "100%", overflow: "hidden", backgroundColor: "rgba(0,0,0,0.4)" }), Object.assign(this.modalIframe.style, { margin: "auto", width: "60%", height: "80%", overflow: "auto", border: "none", backgroundColor: "white", opacity: "0", transition: "opacity 0.2s ease" }), t && (this.modalBackground.appendChild(this.modalIframe), t.appendChild(this.modalBackground)); const e = this; window.onclick = function (t) { t.target === e.modalBackground && (e.modalBackground.style.display = "none") } } open(t) { const { url: e, token: a } = t; this.modalIframe.onload = () => { l({ getAuthToken: () => a, closeModal: () => this.close() }, p(this.modalIframe.contentWindow)) }, this.modalIframe.src = e, this.modalBackground.style.display = "flex", setTimeout(() => { this.modalIframe.style.opacity = "1" }, 200) } close() { this.modalIframe.src = "", this.modalIframe.style.opacity = "0", setTimeout(() => { this.modalBackground.style.display = "none" }, 200) } getBackground() { return this.modalBackground } getIframe() { return this.modalIframe } }; var w = class { constructor(t, e) { this.launcherIframe = document.createElement("iframe"), this.launcherIframe.id = "mw4web_launcher_iframe", Object.assign(this.launcherIframe.style, { bottom: e.bottom, right: e.right, position: "fixed", zIndex: e.zIndex, display: "none", width: "125px", height: "125px", borderWidth: "0px" }), t && t.appendChild(this.launcherIframe) } async init({ url: t, payload: e }) { this.launcherIframe.src = new URL("/launcher", t).href; const a = new Promise(t => { this.launcherIframe.onload = t }); await a, v(this.launcherIframe, "INIT_LAUNCHER", e) } show() { this.launcherIframe.style.display = "block" } hide() { this.launcherIframe.style.display = "none" } resize(t) { this.launcherIframe && Object.assign(this.launcherIframe.style, t) } updateBadge(t) { v(this.launcherIframe, "BADGE", t) } openExternal() { v(this.launcherIframe, "OPEN_EXTERNAL", null) } getIframe() { return this.launcherIframe } }; class E { constructor(t, e) { this.metadata = e, this.botId = t, this.lastUrl = window.location.href } async init(t) { var e, a, s, i; if (function () { const t = navigator.userAgent; return !!/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(t) || (!!/Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(t) || !!(navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 0)) }() || document.getElementById("mw4web_iframe")) return; const n = document.getElementById("webchat"); this.chatIframe = document.createElement("iframe"), this.style = {}, this.style.zIndex = parseInt((null === (e = this.metadata.styles) || void 0 === e ? void 0 : e.zIndex) || "999", 10), this.style.bottom = (null === (a = this.metadata.styles) || void 0 === a ? void 0 : a.bottom) || "0px", this.style.right = (null === (s = this.metadata.styles) || void 0 === s ? void 0 : s.right) || "10px", this.style.offset = "80px", this.style.transition = "all 0.2s ease", this.style.transitionOffset = "20px", this.style.maxHeight = `calc(100vh - 10px - ${this.style.bottom})`, this.style.maxWidth = `calc(100vw - 10px - ${this.style.right})`, this.chatIframe.id = "mw4web_iframe", this.chatIframe.src = this.metadata.serverUrl || "https://webchat-kprod.moveworks.io/", Object.assign(this.chatIframe.style, { bottom: this.style.bottom, right: this.style.right, position: "fixed", zIndex: "" + (this.style.zIndex + 1), borderWidth: "0px", display: "none", maxHeight: this.style.maxHeight, maxWidth: this.style.maxWidth, transition: this.style.transition, transitionProperty: "bottom, right, opacity" }), this.chatIframe.title = "MW Webchat", this.modal = new I(n), this.launcher = new w(n, this.style), window.addEventListener("message", async ({ data: e }) => { var a, s, i, n, r, o, h, l, c; if ("mw4web_app_ready" === e) return this.handlers = d(p(this.chatIframe.contentWindow)), void await this.handlers.setupConfig({ token: t, botId: this.botId, href: window.location.href, buildVersion: this.metadata.buildVersion, host: null === (a = this.metadata.host) || void 0 === a ? void 0 : a.toLowerCase() }); switch ("mw4web_app_open" === e && (null === (s = this.launcher) || void 0 === s || s.openExternal(), this.postChat("OPEN_EXTERNAL")), e.action) { case "RESIZE": this.setIframeStyles(e.payload); break; case "SHOW": this.show(); break; case "HIDE": this.hide(); break; case "AUTH": (null === (i = this.metadata.tokenRefresh) || void 0 === i ? void 0 : i.enabled) && (await this.reauth(), this.authInterval && clearInterval(this.authInterval), this.setupAuthInterval()); break; case "OPEN_MODAL": null === (n = this.modal) || void 0 === n || n.open(e.payload); break; case "STYLE_CHAT": this.styleChat(e.payload); break; case "OPEN_CHAT": this.showChat(), this.postChat("OPEN_CHAT"); break; case "CLOSE_CHAT": this.hideChat(), this.postChat("CLOSE_CHAT"); break; case "HIDE_LAUNCHER": this.hideChat(), null === (r = this.launcher) || void 0 === r || r.hide(); break; case "INIT_LAUNCHER": await (null === (o = this.launcher) || void 0 === o ? void 0 : o.init(e.payload)); break; case "SHOW_LAUNCHER": null === (h = this.launcher) || void 0 === h || h.show(); break; case "UPDATE_BADGE": null === (l = this.launcher) || void 0 === l || l.updateBadge(e.payload); break; case "RESIZE_LAUNCHER": null === (c = this.launcher) || void 0 === c || c.resize(e.payload) } }); const r = new Promise(t => { this.chatIframe.onload = t }); n && (n.appendChild(this.chatIframe), await r, new MutationObserver(async () => { var t; const e = window.location.href; e !== this.lastUrl && (this.lastUrl = e, await (null === (t = this.handlers) || void 0 === t ? void 0 : t.onHrefUpdate(e))) }).observe(document, { subtree: !0, childList: !0 }), (null === (i = this.metadata.tokenRefresh) || void 0 === i ? void 0 : i.enabled) && this.setupAuthInterval()) } show() { this.chatIframe && (this.chatIframe.style.display = "block") } hide() { this.chatIframe && (this.chatIframe.style.display = "none") } setupAuthInterval() { this.authInterval = setInterval(async () => { await this.reauth() }, 6e4 * this.metadata.tokenRefresh.interval) } setIframeStyles(t) { if (this.chatIframe && (this.chatIframe.style.height = t.height, this.chatIframe.style.width = t.width, this.chatIframe.style.boxShadow = t.boxShadow, this.chatIframe.style.borderRadius = t.borderRadius, "maximize" in t)) { if (this.chatIframe.style.transition = "none", t.maximize) Object.assign(this.chatIframe.style, { maxHeight: "100%", maxWidth: "100%", bottom: "0", right: "0" }); else { const { maxHeight: t, maxWidth: e, bottom: a, right: s, offset: i } = this.style; Object.assign(this.chatIframe.style, { maxHeight: t, maxWidth: e, right: s, bottom: `calc(${a} + ${i})` }) } this.chatIframe.style.transition = this.style.transition } } async reauth() { var t; const e = await (null === (t = this.metadata.snowServerAPIs) || void 0 === t ? void 0 : t.update()); setTimeout(() => { var t; return null === (t = this.handlers) || void 0 === t ? void 0 : t.setupConfig({ token: null == e ? void 0 : e.jwt, botId: this.botId, href: window.location.href, buildVersion: this.metadata.buildVersion, host: this.metadata.host }) }, 1e3) } styleChat(t) { this.chatIframe && Object.assign(this.chatIframe.style, t) } showChat() { const { bottom: t, offset: e, transitionOffset: a } = this.style; this.chatIframe && (Object.assign(this.chatIframe.style, { bottom: `calc(${t} + ${e} - ${a})` }), this.chatIframe.style.display = "block", setTimeout(() => { Object.assign(this.chatIframe.style, { opacity: 1, bottom: `calc(${t} + ${e})` }) }, 10)) } hideChat() { const { bottom: t, offset: e, transitionOffset: a } = this.style; this.chatIframe && (Object.assign(this.chatIframe.style, { opacity: 0, bottom: `calc(${t} + ${e} - ${a})` }), setTimeout(() => { this.chatIframe.style.display = "none" }, 250)) } postChat(t, e) { p(this.chatIframe.contentWindow).postMessage({ action: t, payload: e }) } } async function k(t, e, a) { const s = Object.assign(Object.assign({}, a), { buildVersion: "1.0.0.2023-02-04T13:52:24.499Z" }), i = new E(e, s); return i.init(t), i } } });